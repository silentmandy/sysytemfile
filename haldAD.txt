SOURCE

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 22.12.2024 13:32:46
// Design Name: 
// Module Name: HalfAdder
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


// Half Adder Module
module half_adder(
    input a,
    input b,
    output sum,
    output carry
);

    assign sum = a ^ b; // XOR operation for sum
    assign carry = a & b; // AND operation for carry

endmodule

TESTBENCH


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 22.12.2024 13:35:16
// Design Name: 
// Module Name: HalfAdder_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


// Half Adder Module

module half_adder_tb;

    reg a, b;
    wire sum, carry;

    // Instantiate the half_adder module
    half_adder dut (
        .a(a),
        .b(b),
        .sum(sum),
        .carry(carry)
    );

    // Test vectors
    initial begin
        // Initialize inputs
        a = 0;
        b = 0;

        #10; // Wait for 10 time units
        a = 0;
        b = 1;

        #10;
        a = 1;
        b = 0;

        #10;
        a = 1;
        b = 1;

        #10;
        $finish; // End simulation
    end

    // Display output
    always @ (a or b) begin // Corrected to 'or'
        $display("a = %b, b = %b, sum = %b, carry = %b", a, b, sum, carry);
    end

endmodule