Source
BASIC GATES

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 22.12.2024 12:42:10
// Design Name: 
// Module Name: basic_gate
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module basic_gates (
    input wire A, 
    input wire B, 
    output wire AND_OUT,
    output wire OR_OUT,
    output wire NOT_A,
    output wire NOT_B,
    output wire NAND_OUT,
    output wire NOR_OUT,
    output wire XOR_OUT,
    output wire XNOR_OUT
);

    // Basic Gates
    assign AND_OUT  = A & B;  // AND gate
    assign OR_OUT   = A | B;  // OR gate
    assign NOT_A    = ~A;     // NOT gate for A
    assign NOT_B    = ~B;     // NOT gate for B
    assign NAND_OUT = ~(A & B); // NAND gate
    assign NOR_OUT  = ~(A | B); // NOR gate
    assign XOR_OUT  = A ^ B;  // XOR gate
    assign XNOR_OUT = ~(A ^ B); // XNOR gate

endmodule

TESTBENCH

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 22.12.2024 13:18:46
// Design Name: 
// Module Name: basic_gates_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


`timescale 1ns / 1ps

module basic_gates_tb;

    // Inputs
    reg A;
    reg B;

    // Outputs
    wire AND_OUT;
    wire OR_OUT;
    wire NOT_A;
    wire NOT_B;
    wire NAND_OUT;
    wire NOR_OUT;
    wire XOR_OUT;
    wire XNOR_OUT;

    // Instantiate the Unit Under Test (UUT)
    basic_gates uut (
        .A(A),
        .B(B),
        .AND_OUT(AND_OUT),
        .OR_OUT(OR_OUT),
        .NOT_A(NOT_A),
        .NOT_B(NOT_B),
        .NAND_OUT(NAND_OUT),
        .NOR_OUT(NOR_OUT),
        .XOR_OUT(XOR_OUT),
        .XNOR_OUT(XNOR_OUT)
    );

    initial begin
        // Monitor the outputs
        $monitor("Time = %0d, A = %b, B = %b, AND = %b, OR = %b, NOT_A = %b, NOT_B = %b, NAND = %b, NOR = %b, XOR = %b, XNOR = %b",
                 $time, A, B, AND_OUT, OR_OUT, NOT_A, NOT_B, NAND_OUT, NOR_OUT, XOR_OUT, XNOR_OUT);

        // Test all input combinations
        A = 0; B = 0; #10;
        A = 0; B = 1; #10;
        A = 1; B = 0; #10;
        A = 1; B = 1; #10;

        // End simulation
        $stop;
    end
endmodule
